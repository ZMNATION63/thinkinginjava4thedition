package com.company.chapter17containerdetails.tasks.task012;

/**
 * 29. (2) Измените код ListPerformance.java так, чтобы в L ist вместо Integer хранились объекты String.
 * Для создания тестовых значений используйте генератор из главы 16.
 * <p>
 * 30. (3) Сравните производительность C o llection s.so rt() для ArrayList и LinkedList.
 * 31. (5) Создайте контейнер, инкапсулирующий массив String. Контейнер должен
 * поддерживать только добавление и удаление String, так что при использовании
 * проблем с преобразованием типа не будет. Если размер внутреннего массива недостаточен для следующего добавления,
 * контейнер должен автоматически изменять
 * его размер. В main() сравните производительность контейнера с ArrayList<String>.
 * <p>
 * 32. (2) Повторите предыдущее упражнение для контейнера in t и сравните производительность с ArrayList<Integer>.
 * Включите в сравнение процесс инкрементирования
 * каждого объекта в контейнере.
 * <p>
 * 33. (5) Создайте реализацию FastTraversalLinkedList, которая во внутреннем представлении использует LinkedList
 * для быстрых вставок/удалений и ArrayList для
 * быстрого перебора и операций get(). Протестируйте, внеся соответствующие изменения в ListPerformance.java.
 */
public class task012 {
}
